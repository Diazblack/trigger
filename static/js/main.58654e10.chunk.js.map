{"version":3,"sources":["components/Foods.js","actions/foodActions.js","actions/types.js","components/FoodForm.js","reducers/foodReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Foods","this","props","fetchFoods","nextProps","newFood","foods","push","foodItems","map","food","react_default","a","createElement","key","id","title","body","Component","connect","state","items","item","dispatch","fetch","then","response","json","type","payload","FoodForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","bind","assertThisInitialized","onSubmit","event","setState","defineProperty","target","name","value","preventDefault","createFood","foodData","method","headers","content-type","JSON","stringify","initialState","combineReducers","arguments","length","undefined","action","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","className","components_FoodForm","components_Foods","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58654e10.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchFoods} from '../actions/foodActions';\n\n class Foods extends Component {\n   componentWillMount() {\n     this.props.fetchFoods();\n   }\n\n   componentWillReceiveProps(nextProps) {\n     if(nextProps.newFood) {\n       this.props.foods.push(nextProps.newFood);\n     }\n   }\n  render() {\n    const foodItems = this.props.foods.map(food => (\n      <div key={food.id}>\n        <h3> {food.title} </h3>\n        <h3> {food.body} </h3>\n      </div>\n    ))\n    return(\n      <div>\n        <h1> Foods</h1>\n        {foodItems}\n      </div>\n    )\n  }\n}\n\nFoods.propTypes = {\n  fetchFoods: PropTypes.func.isRequired,\n  foods: PropTypes.array.isRequired,\n  newFood: PropTypes.object\n}\n\nconst mapStateToProps = state => ({\n  foods: state.foods.items,\n  newFood: state.foods.item\n});\n\nexport default connect(mapStateToProps, { fetchFoods })(Foods);\n","import { FETCH_FOODS, NEW_FOOD } from './types';\n\nexport const fetchFoods = () => dispatch =>  {\n  fetch('https://jsonplaceholder.typicode.com/posts')\n   .then(response => response.json())\n   .then(foods => dispatch({\n     type: FETCH_FOODS,\n     payload: foods\n   })\n );\n}\n\nexport const createFood = (foodData) => dispatch => {\n  fetch('https://jsonplaceholder.typicode.com/posts', {\n    method: 'POST',\n    headers: {\n      'content-type': 'application/json'\n    },\n    body: JSON.stringify(foodData)\n  })\n    .then(response => response.json())\n    .then(food => dispatch({\n      type: NEW_FOOD,\n      payload: food\n    })\n  );\n\n }\n","export const FETCH_FOODS = 'FETCH_FOODS';\nexport const NEW_FOOD = 'NEW_FOOD';\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport {connect } from 'react-redux';\nimport { createFood } from '../actions/foodActions';\n\nclass FoodForm extends Component {\n   constructor(props) {\n     super(props);\n     this.state = {\n       title: '',\n       body: ''\n     };\n     this.onChange = this.onChange.bind(this);\n     this.onSubmit = this.onSubmit.bind(this);\n   }\n\n   onChange(event) {\n     this.setState({ [event.target.name]: event.target.value });\n   }\n\n   onSubmit(event){\n     event.preventDefault();\n\n     const food = {\n       title: this.state.title,\n       body: this.state.body\n     }\n\n     this.props.createFood(food);\n   }\n  render() {\n    return(\n      <div>\n        <form onSubmit={this.onSubmit}>\n          <div>\n            <label>Title: </label> <br/>\n            <input type=\"text\" name=\"title\" value={this.state.title}\n            onChange = {this.onChange}\n            />\n          </div>\n          <div>\n            <label>Body: </label> <br/>\n            <textarea name=\"body\" value={this.state.body}\n            onChange = {this.onChange}\n             />\n          </div>\n          <br/>\n          <button type=\"submit\"> Submit </button>\n        </form>\n      </div>\n    )\n  }\n}\n\nFoodForm.propTypes = {\n  createFood: PropTypes.func.isRequired\n}\nexport default connect(null, {createFood} )(FoodForm);\n","import { FETCH_FOODS, NEW_FOOD } from '../actions/types'\nconst initialState = {\n  items: [],\n  item: {}\n}\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_FOODS:\n      return {\n        ...state,\n        items: action.payload\n      }\n    case NEW_FOOD:\n      return {\n        ...state,\n        item: action.payload    \n      }\n\n    default:\n     return state;\n\n  }\n}\n","import { combineReducers } from 'redux';\nimport foodReducer from './foodReducer';\n\nexport default combineReducers({\n  foods: foodReducer\n});\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\n\nimport Foods from './components/Foods';\nimport FoodForm from './components/FoodForm';\n\nimport store from './store';\nclass App extends Component {\n\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <FoodForm/>\n          <hr/>\n          <Foods />\n\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}